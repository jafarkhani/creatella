[{"D:\\projects\\com\\react\\creatella\\src\\index.tsx":"1","D:\\projects\\com\\react\\creatella\\src\\App.tsx":"2","D:\\projects\\com\\react\\creatella\\src\\components\\loading\\Loading.tsx":"3","D:\\projects\\com\\react\\creatella\\src\\modals\\types.tsx":"4","D:\\projects\\com\\react\\creatella\\src\\utils\\XDate.tsx":"5","D:\\projects\\com\\react\\creatella\\src\\components\\ProductGrid\\ProductGrid.tsx":"6","D:\\projects\\com\\react\\creatella\\src\\components\\DataGrid\\DataGrid.tsx":"7","D:\\projects\\com\\react\\creatella\\src\\components\\DataGrid\\types.tsx":"8","D:\\projects\\com\\react\\creatella\\src\\components\\error\\ErrorHandler.tsx":"9"},{"size":213,"mtime":1607707923374,"results":"10","hashOfConfig":"11"},{"size":227,"mtime":1607640581680,"results":"12","hashOfConfig":"11"},{"size":452,"mtime":1607590073126,"results":"13","hashOfConfig":"11"},{"size":79,"mtime":1607640009872,"results":"14","hashOfConfig":"11"},{"size":6709,"mtime":1607608853711,"results":"15","hashOfConfig":"11"},{"size":1509,"mtime":1607709500736,"results":"16","hashOfConfig":"11"},{"size":8693,"mtime":1607712571869,"results":"17","hashOfConfig":"11"},{"size":582,"mtime":1607694143354,"results":"18","hashOfConfig":"11"},{"size":753,"mtime":1607709355472,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1nlhlf7",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"D:\\projects\\com\\react\\creatella\\src\\index.tsx",[],["41","42"],"D:\\projects\\com\\react\\creatella\\src\\App.tsx",[],"D:\\projects\\com\\react\\creatella\\src\\components\\loading\\Loading.tsx",[],["43","44"],"D:\\projects\\com\\react\\creatella\\src\\modals\\types.tsx",[],"D:\\projects\\com\\react\\creatella\\src\\utils\\XDate.tsx",["45","46","47","48"],"\r\nimport { isString } from \"underscore\";\r\n\r\nclass XDate {\r\n    \r\n    static now(){\r\n        return new Date();\r\n    }\r\n    \r\n    static dayNames = [\r\n        \"Sunday\",\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\",\r\n        \"Saturday\"\r\n    ];\r\n    static monthNames = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\"\r\n    ];\r\n    static monthNumbers = {\r\n        Jan:0,\r\n        Feb:1,\r\n        Mar:2,\r\n        Apr:3,\r\n        May:4,\r\n        Jun:5,\r\n        Jul:6,\r\n        Aug:7,\r\n        Sep:8,\r\n        Oct:9,\r\n        Nov:10,\r\n        Dec:11\r\n    };\r\n    \r\n    static getShortMonthName(month:number):string {\r\n        return XDate.monthNames[month].substring(0, 3);\r\n    }\r\n\r\n    static getShortDayName(day:number):string {\r\n        return XDate.dayNames[day].substring(0, 3);\r\n    }\r\n    \r\n    static getDaysBetweenDates(date1: Date|string, date2: Date|string): number {\r\n\r\n        date1 = isString(date1) ? new Date(date1) : date1;\r\n        date2 = isString(date2) ? new Date(date2) : date2;\r\n\r\n        let diffTime = Math.abs(date2.getTime() - date1.getTime());\r\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n        \r\n        return diffDays;\r\n    }\r\n\r\n    static isLeapYear(date:Date) {\r\n        var year = date.getFullYear();\r\n        return !!((year & 3) == 0 && (year % 100 || (year % 400 == 0 && year)));\r\n    }\r\n    \r\n    static getDaysInMonth(date:Date) {\r\n        var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n        var m = date.getMonth();\r\n        return m === 1 && XDate.isLeapYear(date) ? 29 : daysInMonth[m];        \r\n    }    \r\n\r\n    static getDayOfYear(date:Date) {\r\n        var num = 0,\r\n            d = XDate.clone(date),\r\n            m = date.getMonth(),\r\n            i;\r\n        for (i = 0, d.setDate(1), d.setMonth(0); i < m; d.setMonth(++i)) {\r\n            num += XDate.getDaysInMonth(d);\r\n        }\r\n        return num + date.getDate() - 1;\r\n    }\r\n\r\n    static clone(date:Date) {\r\n        return new Date(date.getTime());\r\n    }\r\n\r\n    static getGMTOffset(date:Date, colon:boolean = true) {\r\n        var offset = date.getTimezoneOffset();\r\n        return (offset > 0 ? \"-\" : \"+\")\r\n            + (Math.floor(Math.abs(offset) / 60)).toString().padStart(2, \"0\")\r\n            + (colon ? \":\" : \"\")\r\n            + (Math.abs(offset % 60)).toString().padStart(2, \"0\");\r\n    }\r\n\r\n    static getTimezone(date:Date) {\r\n        return date.toString().replace(/^.* (?:\\((.*)\\)|([A-Z]{1,4})(?:[\\-+][0-9]{4})?(?: -?\\d+)?)$/, \"$1$2\").replace(/[^A-Z]/g, \"\");\r\n    }    \r\n    \r\n    static getSuffix(date:Date) {\r\n        switch (date.getDate()) {\r\n            case 1:\r\n            case 21:\r\n            case 31:\r\n                return \"st\";\r\n            case 2:\r\n            case 22:\r\n                return \"nd\";\r\n            case 3:\r\n            case 23:\r\n                return \"rd\";\r\n            default:\r\n                return \"th\";\r\n        }\r\n    }\r\n    static getWeekOfYear(date:Date) {\r\n        var ms1d = 864e5, \r\n            ms7d = 7 * ms1d; \r\n        var DC3 = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate() + 3) / ms1d, \r\n            AWN = Math.floor(DC3 / 7), \r\n            Wyr = new Date(AWN * ms7d).getUTCFullYear();\r\n        return AWN - Math.floor(Date.UTC(Wyr, 0, 7) / ms7d) + 1;\r\n    }\r\n    \r\n\r\n    static getFormatCode(inputDate:Date, char:string):string|number{\r\n        switch(char){\r\n            case \"d\": return inputDate.getDate().toString().padStart(2, '0');\r\n            case \"D\": return XDate.getShortDayName(inputDate.getDay()); \r\n            case \"l\": return XDate.dayNames[inputDate.getDay()];\r\n            case \"N\": return (inputDate.getDay() ? inputDate.getDay() : 7);\r\n            case \"S\": return XDate.getSuffix(inputDate);\r\n            case \"w\": return inputDate.getDay();\r\n            case \"z\": return XDate.getDayOfYear(inputDate);\r\n            case \"W\": return XDate.getWeekOfYear(inputDate).toString().padStart(2, '0');\r\n            case \"F\": return XDate.monthNames[inputDate.getMonth()];\r\n            case \"m\": return (inputDate.getMonth() + 1).toString().padStart(2, '0');\r\n            case \"M\": return XDate.getShortMonthName(inputDate.getMonth()); \r\n            case \"n\": return (inputDate.getMonth() + 1);\r\n            case \"t\": return XDate.getDaysInMonth(inputDate);\r\n            case \"L\": return (XDate.isLeapYear(inputDate) ? 1 : 0);\r\n            case \"o\": return (inputDate.getFullYear() + (XDate.getWeekOfYear(inputDate) == 1 && inputDate.getMonth() > 0 ? +1 : (XDate.getWeekOfYear(inputDate) >= 52 && inputDate.getMonth() < 11 ? -1 : 0)));\r\n            case \"Y\": return inputDate.getFullYear().toString().padStart(4, '0');\r\n            case \"y\": return ('' + inputDate.getFullYear()).substring(2, 4);\r\n            case \"a\": return (inputDate.getHours() < 12 ? 'am' : 'pm');\r\n            case \"A\": return (inputDate.getHours() < 12 ? 'AM' : 'PM');\r\n            case \"g\": return ((inputDate.getHours() % 12) ? inputDate.getHours() % 12 : 12);\r\n            case \"G\": return inputDate.getHours();\r\n            case \"h\": return (inputDate.getHours() % 12 ? inputDate.getHours() % 12 : 12).toString().padStart(2, '0');\r\n            case \"H\": return inputDate.getHours().toString().padStart(2, '0');\r\n            case \"i\": return inputDate.getMinutes().toString().padStart( 2, '0');\r\n            case \"s\": return inputDate.getSeconds().toString().padStart( 2, '0');\r\n            case \"u\": return inputDate.getMilliseconds().toString().padStart( 3, '0');\r\n            case \"O\": return XDate.getGMTOffset(inputDate);\r\n            case \"P\": return XDate.getGMTOffset(inputDate, true);\r\n            case \"T\": return XDate.getTimezone(inputDate);\r\n            case \"Z\": return (inputDate.getTimezoneOffset() * -60);\r\n            default: return char;\r\n        }        \r\n    }\r\n\r\n    static format(inputDate: Date|string, format:string): string{\r\n\r\n        inputDate = isString(inputDate) ? new Date(inputDate) : inputDate;\r\n\r\n        var code = [],\r\n            special = false,\r\n            ch = '';\r\n        for (var i = 0; i < format.length; ++i) {\r\n            ch = format.charAt(i);\r\n            if (!special && ch === \"\\\\\") {\r\n                special = true;\r\n            } else if (special) {\r\n                special = false;\r\n                code.push(ch);\r\n            } else {\r\n                code.push(XDate.getFormatCode(inputDate, ch));\r\n            }\r\n        }\r\n        return code.join('');\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default XDate;","D:\\projects\\com\\react\\creatella\\src\\components\\ProductGrid\\ProductGrid.tsx",[],"D:\\projects\\com\\react\\creatella\\src\\components\\DataGrid\\DataGrid.tsx",["49","50"],"D:\\projects\\com\\react\\creatella\\src\\components\\DataGrid\\types.tsx",[],"D:\\projects\\com\\react\\creatella\\src\\components\\error\\ErrorHandler.tsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"51","replacedBy":"55"},{"ruleId":"53","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":69,"column":30,"nodeType":"59","messageId":"60","endLine":69,"endColumn":32},{"ruleId":"57","severity":1,"message":"58","line":69,"column":65,"nodeType":"59","messageId":"60","endLine":69,"endColumn":67},{"ruleId":"61","severity":1,"message":"62","line":102,"column":73,"nodeType":"63","messageId":"64","endLine":102,"endColumn":74,"suggestions":"65"},{"ruleId":"57","severity":1,"message":"58","line":147,"column":89,"nodeType":"59","messageId":"60","endLine":147,"endColumn":91},{"ruleId":"66","severity":1,"message":"67","line":1,"column":28,"nodeType":"68","messageId":"69","endLine":1,"endColumn":43},{"ruleId":"70","severity":1,"message":"71","line":109,"column":8,"nodeType":"72","endLine":109,"endColumn":56,"suggestions":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],["74"],["75"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["76","77"],"@typescript-eslint/no-unused-vars","'useLayoutEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'FechDate'. Either include it or remove the dependency array.","ArrayExpression",["78"],"no-global-assign","no-unsafe-negation",{"messageId":"79","fix":"80","desc":"81"},{"messageId":"82","fix":"83","desc":"84"},{"desc":"85","fix":"86"},"removeEscape",{"range":"87","text":"88"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"89","text":"90"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [FechDate, datastate.page, props.dataUrl, props.pageCount]",{"range":"91","text":"92"},[2699,2700],"",[2699,2699],"\\",[3435,3483],"[FechDate, datastate.page, props.dataUrl, props.pageCount]"]